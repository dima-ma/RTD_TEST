[
  {
    "ContainingType": "RealTimeDashboardBackend.Controllers.PerformanceController",
    "Method": "RunLoadTest",
    "RelativePath": "api/Performance/load-test",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "duration",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "RealTimeDashboardBackend.Controllers.PerformanceController",
    "Method": "GetPerformanceMetrics",
    "RelativePath": "api/Performance/metrics",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": []
  },
  {
    "ContainingType": "RealTimeDashboardBackend.Controllers.SensorDataController",
    "Method": "GetRecentAlerts",
    "RelativePath": "api/SensorData/alerts",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "count",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.IEnumerable\u00601[[RealTimeDashboardBackend.Models.AnomalyAlert, RealTimeDashboardBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "RealTimeDashboardBackend.Controllers.SensorDataController",
    "Method": "GetHealthStatus",
    "RelativePath": "api/SensorData/health",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": []
  },
  {
    "ContainingType": "RealTimeDashboardBackend.Controllers.SensorDataController",
    "Method": "GetRecentReadings",
    "RelativePath": "api/SensorData/recent",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "count",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.IEnumerable\u00601[[RealTimeDashboardBackend.Models.SensorReading, RealTimeDashboardBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "RealTimeDashboardBackend.Controllers.SensorDataController",
    "Method": "SimulateReading",
    "RelativePath": "api/SensorData/simulate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "reading",
        "Type": "RealTimeDashboardBackend.Models.SensorReading",
        "IsRequired": true
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "RealTimeDashboardBackend.Controllers.SensorDataController",
    "Method": "GetAggregatedStats",
    "RelativePath": "api/SensorData/stats",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "windowMinutes",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "RealTimeDashboardBackend.Models.AggregatedStats",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Program\u002B\u003C\u003Ec",
    "Method": "\u003C\u003CMain\u003E$\u003Eb__0_1",
    "RelativePath": "health",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "\u003C\u003Ef__AnonymousType5\u00602[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "MediaTypes": [
          "application/json"
        ],
        "StatusCode": 200
      }
    ]
  }
]